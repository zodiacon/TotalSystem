#include "pch.h"
#include "AccessMaskDecoder.h"

using namespace std;

#define TRACELOG_REGISTER_GUIDS 0x0800
#define WMIGUID_NOTIFICATION	0x0004

#define FLT_PORT_CONNECT        0x0001
#define FLT_PORT_ALL_ACCESS     (FLT_PORT_CONNECT | STANDARD_RIGHTS_ALL)

#define IO_WAIT_COMPLETION_PACKET_MODIFY_STATE 0x0001
#define IO_WAIT_COMPLETION_PACKET_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | 1) 

#define MEMORY_PARTITION_QUERY_ACCESS  0x0001
#define MEMORY_PARTITION_MODIFY_ACCESS 0x0002

#define SYMBOLIC_LINK_QUERY    0x0001
#define SYMBOLIC_LINK_SET      0x0002

//#define SYMBOLIC_LINK_ALL_ACCESS_EX (STANDARD_RIGHTS_REQUIRED | 0xFFFF)

#define IO_COMPLETION_MODIFY_STATE  0x0002  
#define IO_COMPLETION_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0x3) 

#define FLT_PORT_CONNECT        0x0001
#define FLT_PORT_ALL_ACCESS     (FLT_PORT_CONNECT | STANDARD_RIGHTS_ALL)

#define PORT_CONNECT 0x0001

#define WMIGUID_QUERY                 0x0001
#define WMIGUID_SET                   0x0002
#define WMIGUID_NOTIFICATION          0x0004
#define WMIGUID_READ_DESCRIPTION      0x0008
#define WMIGUID_EXECUTE               0x0010
#define TRACELOG_CREATE_REALTIME      0x0020
#define TRACELOG_CREATE_ONDISK        0x0040
#define TRACELOG_GUID_ENABLE          0x0080
#define TRACELOG_ACCESS_KERNEL_LOGGER 0x0100
#define TRACELOG_LOG_EVENT            0x0200
#define TRACELOG_ACCESS_REALTIME      0x0400
#define TRACELOG_REGISTER_GUIDS       0x0800
#define TRACELOG_JOIN_GROUP           0x1000

//#define WMIGUID_ALL_ACCESS_WIN2K (STANDARD_RIGHTS_READ | \
//								  WMIGUID_QUERY | \
//								  WMIGUID_SET | \
//								  WMIGUID_NOTIFICATION | \
//								  WMIGUID_READ_DESCRIPTION | \
//								  WMIGUID_EXECUTE | \
//								  TRACELOG_CREATE_REALTIME | \
//								  TRACELOG_CREATE_ONDISK | \
//								  TRACELOG_GUID_ENABLE | \
//								  TRACELOG_ACCESS_KERNEL_LOGGER | \
//								  TRACELOG_LOG_EVENT | \
//								  TRACELOG_ACCESS_REALTIME)

#define WORKER_FACTORY_RELEASE           0x0001
#define WORKER_FACTORY_WAIT              0x0002
#define WORKER_FACTORY_SET_INFORMATION   0x0004
#define WORKER_FACTORY_QUERY_INFORMATION 0x0008
#define WORKER_FACTORY_WORKER_READY      0x0010
#define WORKER_FACTORY_SHUTDOWN          0x0020
#define WORKER_FACTORY_POST_DIRECT       0x0040
#define WORKER_FACTORY_BIND              0x0080

#define DEBUG_ALL_ACCESS		(STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | DEBUG_READ_EVENT | DEBUG_PROCESS_ASSIGN |\
								DEBUG_SET_INFORMATION | DEBUG_QUERY_INFORMATION)

unordered_map<wstring, vector<AccessMaskDecoder::AccessMaskPair>> AccessMaskDecoder::Tables = {
	{ L"DebugObject", {
		{ DEBUG_ALL_ACCESS,			"DEBUG_ALL_ACCESS", true },
		{ DEBUG_READ_EVENT,			"READ_EVENT" },
		{ DEBUG_PROCESS_ASSIGN,		"PROCESS_ASIGN" },
		{ DEBUG_SET_INFORMATION,	"SET_INFORMATION" },
		{ DEBUG_QUERY_INFORMATION,	"QUERY_INFORMATION" },
		}
	},

	{ L"Process", {
		{ PROCESS_ALL_ACCESS,				"PROCESS_ALL_ACCESS", true },
		{ PROCESS_CREATE_THREAD            ,"CREATE_THREAD" },
		{ PROCESS_SET_SESSIONID            ,"SET_SESSIONID" },
		{ PROCESS_VM_OPERATION             ,"VM_OPERATION" },
		{ PROCESS_VM_READ                  ,"VM_READ" },
		{ PROCESS_VM_WRITE                 ,"VM_WRITE" },
		{ PROCESS_DUP_HANDLE               ,"DUP_HANDLE" },
		{ PROCESS_CREATE_PROCESS           ,"CREATE_PROCESS" },
		{ PROCESS_SET_QUOTA                ,"SET_QUOTA" },
		{ PROCESS_SET_INFORMATION          ,"SET_INFORMATION" },
		{ PROCESS_QUERY_INFORMATION        ,"QUERY_INFORMATION" },
		{ PROCESS_SUSPEND_RESUME           ,"SUSPEND_RESUME" },
		{ PROCESS_QUERY_LIMITED_INFORMATION,"QUERY_LIMITED_INFORMATION" },
		{ PROCESS_SET_LIMITED_INFORMATION  ,"SET_LIMITED_INFORMATION" },
		},
	},

	{ L"Thread", {
		{ THREAD_ALL_ACCESS,				"THREAD_ALL_ACCESS", true },
		{ THREAD_TERMINATE                  ,"TERMINATE" },
		{ THREAD_SUSPEND_RESUME             ,"SUSPEND_RESUME" },
		{ THREAD_GET_CONTEXT                ,"GET_CONTEXT", },
		{ THREAD_SET_CONTEXT                ,"SET_CONTEXT", },
		{ THREAD_QUERY_INFORMATION          ,"QUERY_INFORMATION" },
		{ THREAD_SET_INFORMATION            ,"SET_INFORMATION" },
		{ THREAD_SET_THREAD_TOKEN           ,"SET_THREAD_TOKEN" },
		{ THREAD_IMPERSONATE                ,"IMPERSONATE" },
		{ THREAD_DIRECT_IMPERSONATION,		 "DIRECT_IMPERSONATION" },
		{ THREAD_SET_LIMITED_INFORMATION,	 "SET_LIMITED_INFORMATION" },
		{ THREAD_QUERY_LIMITED_INFORMATION,  "QUERY_LIMITED_INFORMATION" },
		{ THREAD_RESUME						,"RESUME" },
		},
	},

	{ L"Job", {
		{ JOB_OBJECT_ALL_ACCESS,				"JOB_OBJECT_ALL_ACCESS", true },
		{ JOB_OBJECT_ASSIGN_PROCESS,			"ASSIGN_PROCESS" },
		{ JOB_OBJECT_SET_ATTRIBUTES,			"SET_ATTRIBUTES" },
		{ JOB_OBJECT_QUERY,						"QUERY" },
		{ JOB_OBJECT_TERMINATE,					"TERMINATE" },
		{ JOB_OBJECT_SET_SECURITY_ATTRIBUTES,	"SET_SECURITY_ATTRIBUTES" },
		{ JOB_OBJECT_IMPERSONATE,				"IMPERSONATE" },
		},
	},

	{ L"SymbolicLink", {
		{ SYMBOLIC_LINK_ALL_ACCESS_EX,	"SYMBOLIC_LINK_ALL_ACCESS_EX", true },
		{ SYMBOLIC_LINK_ALL_ACCESS,		"SYMBOLIC_LINK_ALL_ACCESS", true },
		{ SYMBOLIC_LINK_QUERY,			"QUERY" },
		{ SYMBOLIC_LINK_SET,			"SET" },
		},
	},

	{ L"Event", {
		{ EVENT_ALL_ACCESS,				"EVENT_ALL_ACCESS", true },
		{ EVENT_MODIFY_STATE,			"MODIFY_STATE" },
		},
	},

	{ L"Mutant", {
		{ MUTEX_ALL_ACCESS,				"MUTEX_ALL_ACCESS", true },
		{ MUTEX_MODIFY_STATE,			"MODIFY_STATE" },
		},
	},

	{ L"Semaphore", {
		{ SEMAPHORE_ALL_ACCESS,			"SEMAPHORE_ALL_ACCESS", true },
		{ SEMAPHORE_MODIFY_STATE,		"MODIFY_STATE" },
		},
	},

	{ L"FilterCommunicationPort", {
		{ FLT_PORT_ALL_ACCESS,			"FLT_PORT_ALL_ACCESS", true },
		{ FLT_PORT_CONNECT,				"CONNECT" },
		},
	},

	{ L"ALPC Port", {
		{ PORT_ALL_ACCESS,				"PORT_ALL_ACCESS", true },
		{ PORT_CONNECT,					"CONNECT" },
		},
	},

	{ L"Timer", {
		{ TIMER_ALL_ACCESS,				"TIMER_ALL_ACCESS", true },
		{ TIMER_MODIFY_STATE,			"MODIFY_STATE" },
		{ TIMER_QUERY_STATE,			"QUERY_STATE" },
		},
	},

	{ L"IRTimer", {
		{ TIMER_ALL_ACCESS,				"TIMER_ALL_ACCESS", true },
		{ TIMER_MODIFY_STATE,			"MODIFY_STATE" },
		{ TIMER_QUERY_STATE,			"QUERY_STATE" },
		},
	},

	{ L"Session", {
		{ SESSION_ALL_ACCESS,			"SESSION_ALL_ACCESS", true },
		{ SESSION_QUERY_ACCESS,			"QUERY_ACCESS" },
		{ SESSION_MODIFY_ACCESS,		"MODIFY_ACCESS" },
		},
	},

	{ L"File", {
		{ FILE_ALL_ACCESS,				"FILE_ALL_ACCESS", true },
		{ FILE_READ_DATA,				"READ_DATA" },
		{ FILE_READ_ATTRIBUTES,			"READ_ATTRIBUTES" },
		{ FILE_READ_EA,					"READ_EA" },
		{ FILE_WRITE_DATA,				"WRITE_DATA" },
		{ FILE_WRITE_ATTRIBUTES,		"WRITE_ATTRIBUTES" },
		{ FILE_WRITE_EA,				"WRITE_EA" },
		{ FILE_APPEND_DATA,				"APPEND_DATA" },
		{ FILE_EXECUTE,					"EXECUTE" },
		{ FILE_DELETE_CHILD,			"DELETE_CHILD" },
		},
	},

	{ L"Device", {
		{ FILE_ALL_ACCESS,				"FILE_ALL_ACCESS", true },
		{ FILE_READ_DATA,				"READ_DATA" },
		{ FILE_READ_ATTRIBUTES,			"READ_ATTRIBUTES" },
		{ FILE_READ_EA,					"READ_EA" },
		{ FILE_WRITE_DATA,				"WRITE_DATA" },
		{ FILE_WRITE_ATTRIBUTES,		"WRITE_ATTRIBUTES" },
		{ FILE_WRITE_EA,				"WRITE_EA" },
		{ FILE_APPEND_DATA,				"APPEND_DATA" },
		{ FILE_EXECUTE,					"EXECUTE" },
		{ FILE_DELETE_CHILD,			"DELETE_CHILD" },
		},
	},

	{ L"DeviceHandler", {
		{ FILE_ALL_ACCESS,				"FILE_ALL_ACCESS", true },
		{ FILE_READ_DATA,				"READ_DATA" },
		{ FILE_READ_ATTRIBUTES,			"READ_ATTRIBUTES" },
		{ FILE_READ_EA,					"READ_EA" },
		{ FILE_WRITE_DATA,				"WRITE_DATA" },
		{ FILE_WRITE_ATTRIBUTES,		"WRITE_ATTRIBUTES" },
		{ FILE_WRITE_EA,				"WRITE_EA" },
		{ FILE_APPEND_DATA,				"APPEND_DATA" },
		{ FILE_EXECUTE,					"EXECUTE" },
		{ FILE_DELETE_CHILD,			"DELETE_CHILD" },
		},
	},

	{ L"Driver", {
		{ FILE_ALL_ACCESS,				"FILE_ALL_ACCESS", true },
		{ FILE_READ_DATA,				"READ_DATA" },
		{ FILE_READ_ATTRIBUTES,			"READ_ATTRIBUTES" },
		{ FILE_READ_EA,					"READ_EA" },
		{ FILE_WRITE_DATA,				"WRITE_DATA" },
		{ FILE_WRITE_ATTRIBUTES,		"WRITE_ATTRIBUTES" },
		{ FILE_WRITE_EA,				"WRITE_EA" },
		{ FILE_APPEND_DATA,				"APPEND_DATA" },
		{ FILE_EXECUTE,					"EXECUTE" },
		{ FILE_DELETE_CHILD,			"DELETE_CHILD" },
		},
	},

	{ L"Controller", {
		{ FILE_ALL_ACCESS,				"FILE_ALL_ACCESS", true },
		{ FILE_READ_DATA,				"READ_DATA" },
		{ FILE_READ_ATTRIBUTES,			"READ_ATTRIBUTES" },
		{ FILE_READ_EA,					"READ_EA" },
		{ FILE_WRITE_DATA,				"WRITE_DATA" },
		{ FILE_WRITE_ATTRIBUTES,		"WRITE_ATTRIBUTES" },
		{ FILE_WRITE_EA,				"WRITE_EA" },
		{ FILE_APPEND_DATA,				"APPEND_DATA" },
		{ FILE_EXECUTE,					"EXECUTE" },
		{ FILE_DELETE_CHILD,			"DELETE_CHILD" },
		},
	},

	{ L"Adapter", {
		{ FILE_ALL_ACCESS,				"FILE_ALL_ACCESS", true },
		{ FILE_READ_DATA,				"READ_DATA" },
		{ FILE_READ_ATTRIBUTES,			"READ_ATTRIBUTES" },
		{ FILE_READ_EA,					"READ_EA" },
		{ FILE_WRITE_DATA,				"WRITE_DATA" },
		{ FILE_WRITE_ATTRIBUTES,		"WRITE_ATTRIBUTES" },
		{ FILE_WRITE_EA,				"WRITE_EA" },
		{ FILE_APPEND_DATA,				"APPEND_DATA" },
		{ FILE_EXECUTE,					"EXECUTE" },
		{ FILE_DELETE_CHILD,			"DELETE_CHILD" },
		},
	},

	{ L"Token", {
		{ TOKEN_ALL_ACCESS,				"TOKEN_ALL_ACCESS", true },
		{ TOKEN_QUERY,					"QUERY" },
		{ TOKEN_ASSIGN_PRIMARY,			"ASSIGN_PRIMARY" },
		{ TOKEN_QUERY_SOURCE,			"QUERY_SOURCE" },
		{ TOKEN_ADJUST_DEFAULT,			"ADJUST_DEFAULT" },
		{ TOKEN_ADJUST_PRIVILEGES,		"ADJUST_PRIVILEGES" },
		{ TOKEN_ADJUST_SESSIONID,		"ADJUST_SESSIONID" },
		{ TOKEN_ADJUST_GROUPS,			"ADJUST_GROUPS" },
		{ TOKEN_DUPLICATE,				"DUPLICATE" },
		{ TOKEN_IMPERSONATE,			"IMPERSONATE" },
		},
	},

	{ L"Type", {
		{ STANDARD_RIGHTS_REQUIRED | 1, "OBJECT_TYPE_ALL_ACCESS", true },
		{ 1,							"CREATE" },
		},
	},

	{ L"UserApcReserve", {
		{ STANDARD_RIGHTS_REQUIRED | 3, "MEMORY_RESERVE_ALL_ACCESS", true },
		{ 1,							"QUERY", },
		{ 2,							"CHANGE" },
		},
	},

	{ L"IoCompletionReserve", {
		{ STANDARD_RIGHTS_REQUIRED | 3, "MEMORY_RESERVE_ALL_ACCESS", true },
		{ 1,							"QUERY", },
		{ 2,							"CHANGE" },
		},
	},

	{ L"Section", {
		{ SECTION_MAP_EXECUTE_EXPLICIT, "MAP_EXECUTE_EXPLICIT" },
		{ SECTION_ALL_ACCESS,			"SECTION_ALL_ACCESS", true },
		{ SECTION_QUERY,				"QUERY" },
		{ SECTION_MAP_READ,				"MAP_READ" },
		{ SECTION_MAP_WRITE,			"MAP_WRITE" },
		{ SECTION_MAP_EXECUTE,			"MAP_EXECUTE" },
		{ SECTION_EXTEND_SIZE,			"EXTEND_SIZE" },
		},
	},

	{ L"Directory", {
		{ DIRECTORY_ALL_ACCESS,				"DIRECTORY_ALL_ACCESS", true },
		{ DIRECTORY_QUERY,					"QUERY" },
		{ DIRECTORY_TRAVERSE,				"TRAVERSE" },
		{ DIRECTORY_CREATE_OBJECT,			"CREATE_OBJECT" },
		{ DIRECTORY_CREATE_SUBDIRECTORY,	"CREATE_SUBDIRECTORY" },
		},
	},

	{ L"Desktop", {
		{ 0x01ff | STANDARD_RIGHTS_REQUIRED, "DESKTOP_ALL_ACCESS", true },
		{ DESKTOP_READOBJECTS,    	"READOBJECTS" },
		{ DESKTOP_CREATEWINDOW,   	"CREATEWINDOW" },
		{ DESKTOP_CREATEMENU,     	"CREATEMENU" },
		{ DESKTOP_HOOKCONTROL,    	"HOOKCONTROL" },
		{ DESKTOP_JOURNALRECORD,	"JOURNALRECORD" },
		{ DESKTOP_JOURNALPLAYBACK,	"JOURNALPLAYBACK" },
		{ DESKTOP_ENUMERATE,		"ENUMERATE" },
		{ DESKTOP_WRITEOBJECTS,		"WRITEOBJECTS" },
		{ DESKTOP_SWITCHDESKTOP,	"SWITCHDESKTOP" },
		},
	},

	{ L"WindowStation", {
		{ WINSTA_ALL_ACCESS,		"WINSTA_ALL_ACCESS", true },
		{ WINSTA_ENUMDESKTOPS,		"ENUMDESKTOPS" },
		{ WINSTA_READATTRIBUTES,	"READATTRIBUTES" },
		{ WINSTA_ACCESSCLIPBOARD,	"ACCESSCLIPBOARD" },
		{ WINSTA_CREATEDESKTOP,		"CREATEDESKTOP" },
		{ WINSTA_WRITEATTRIBUTES,	"WRITEATTRIBUTES" },
		{ WINSTA_ACCESSGLOBALATOMS,	"ACCESSGLOBALATOMS" },
		{ WINSTA_EXITWINDOWS,		"EXITWINDOWS" },
		{ WINSTA_ENUMERATE,			"ENUMERATE" },
		{ WINSTA_READSCREEN,		"READSCREEN" },
		},
	},

	{ L"Key", {
		{ KEY_ALL_ACCESS,			"KEY_ALL_ACCESS", true },
		{ KEY_QUERY_VALUE,			"QUERY_VALUE" },
		{ KEY_SET_VALUE,			"SET_VALUE" },
		{ KEY_CREATE_SUB_KEY,		"CREATE_SUB_KEY" },
		{ KEY_ENUMERATE_SUB_KEYS,	"ENUMERATE_SUB_KEYS" },
		{ KEY_NOTIFY,				"NOTIFY" },
		{ KEY_CREATE_LINK,			"CREATE_LINK" },
		{ KEY_WOW64_32KEY,			"WOW64_32KEY" },
		{ KEY_WOW64_64KEY,			"WOW64_64KEY" },
		{ KEY_WOW64_RES,			"WOW64_RES" },
		},
	},

	{ L"TpWorkerFactory", {
		{ WORKER_FACTORY_ALL_ACCESS,		"WORKER_FACTORY_ALL_ACCESS", true },
		{ WORKER_FACTORY_RELEASE,			"RELEASE" },
		{ WORKER_FACTORY_WAIT,				"WAIT" },
		{ WORKER_FACTORY_SET_INFORMATION,	"SET_INFORMATION" },
		{ WORKER_FACTORY_QUERY_INFORMATION,	"QUERY_INFORMATION" },
		{ WORKER_FACTORY_WORKER_READY,		"WORKER_READY" },
		{ WORKER_FACTORY_SHUTDOWN,			"SHUTDOWN" },
		{ WORKER_FACTORY_POST_DIRECT,		"POST_DIRECT" },
		{ WORKER_FACTORY_BIND,				"BIND" },
		},
	},

	{ L"EtwRegistration", {
		{ TRACELOG_REGISTER_GUIDS,		"TRACELOG_REGISTER_GUIDS" },
		{ WMIGUID_NOTIFICATION,			"NOTIFICATION" },
		{ WMIGUID_QUERY,				"QUERY" },
		{ WMIGUID_SET,					"SET" },
		{ WMIGUID_READ_DESCRIPTION,		"READ_DESCRIPTION" },
		{ WMIGUID_EXECUTE,				"EXECUTE" },
		},
	},

	{ L"WaitCompletionPacket", {
		{ IO_WAIT_COMPLETION_PACKET_ALL_ACCESS,			"WAIT_COMPLETION_PACKET_ALL_ACCESS", true },
		{ IO_WAIT_COMPLETION_PACKET_MODIFY_STATE,		"MODIFY_STATE" },
		},
	},

	{ L"FilterConnectionPort", {
		{ FLT_PORT_ALL_ACCESS,		"FLT_PORT_ALL_ACCESS", true },
		{ FLT_PORT_CONNECT,			"CONNECT" },
		},
	},

	{ L"IoCompletion", {
		{ IO_COMPLETION_ALL_ACCESS,			"IO_COMPLETION_ALL_ACCESS", true },
		{ IO_COMPLETION_MODIFY_STATE,		"MODIFY_STATE" },
		},
	},

	{ L"Partition", {
		{ MEMORY_PARTITION_ALL_ACCESS,		"MEMORY_PARTITION_ALL_ACCESS", true },
		{ MEMORY_PARTITION_MODIFY_ACCESS,	"MODIFY_ACCESS" },
		{ MEMORY_PARTITION_QUERY_ACCESS,	"QUERY_ACCESS" },
		},
	},

	{ L"KeyedEvent", {
		{ STANDARD_RIGHTS_REQUIRED | 3,			"KEYEDEVENT_ALL_ACCESS", true },
		{ 1,									"WAIT" },
		{ 2,									"WAKE" },
		},
	},

	{ L"PcwObject", {
		{ STANDARD_RIGHTS_REQUIRED | 3,			"PCW_OBJECT_ALL_ACCESS", true },
		{ 1,									"READ" },
		{ 2,									"WRITE" },
		},
	},

	{ L"TmRm", {
		{ RESOURCEMANAGER_ALL_ACCESS,			"RESOURCEMANAGER_ALL_ACCESS", true },
		{ RESOURCEMANAGER_ENLIST,				"ENLIST" },
		{ RESOURCEMANAGER_COMPLETE_PROPAGATION,	"COMPLETE_PROPAGATION" },
		{ RESOURCEMANAGER_SET_INFORMATION,		"SET_INFORMATION" },
		{ RESOURCEMANAGER_QUERY_INFORMATION,	"QUERY_INFORMATION" },
		{ RESOURCEMANAGER_GET_NOTIFICATION,		"GET_NOTIFICATION" },
		{ RESOURCEMANAGER_RECOVER,				"RECOVER" },
		{ RESOURCEMANAGER_REGISTER_PROTOCOL,	"REGISTER_PROTOCOL" },
		},
	},

	{ L"TmTm", {
		{ TRANSACTIONMANAGER_ALL_ACCESS,			"TRANSACTIONMANAGER_ALL_ACCESS", true },
		{ TRANSACTIONMANAGER_SET_INFORMATION,		"SET_INFORMATION" },
		{ TRANSACTIONMANAGER_QUERY_INFORMATION,		"QUERY_INFORMATION" },
		{ TRANSACTIONMANAGER_RENAME,				"RENAME" },
		{ TRANSACTIONMANAGER_RECOVER,				"RECOVER" },
		{ TRANSACTIONMANAGER_CREATE_RM,				"CREATE_RM" },
		},
	},

	{ L"TmTx", {
		{ TRANSACTION_ALL_ACCESS,			"TRANSACTION_ALL_ACCESS", true },
		{ TRANSACTION_SET_INFORMATION,		"SET_INFORMATION" },
		{ TRANSACTION_QUERY_INFORMATION,	"QUERY_INFORMATION" },
		{ TRANSACTION_COMMIT,				"COMMIT" },
		{ TRANSACTION_ROLLBACK,				"ROLLBACK" },
		{ TRANSACTION_PROPAGATE,			"PROPAGATE" },
		{ TRANSACTION_RIGHT_RESERVED1,		"RESERVED1" },
		},
	},

	{ L"TmEn", {
		{ ENLISTMENT_ALL_ACCESS,			"ENLISTMENT_ALL_ACCESS", true },
		{ ENLISTMENT_SET_INFORMATION,		"SET_INFORMATION" },
		{ ENLISTMENT_QUERY_INFORMATION,		"QUERY_INFORMATION" },
		{ ENLISTMENT_RECOVER,				"RECOVER" },
		{ ENLISTMENT_SUBORDINATE_RIGHTS,	"SUBORDINATE_RIGHTS" },
		{ ENLISTMENT_SUPERIOR_RIGHTS,		"SUPERIOR_RIGHT" },
		},
	},

	{ L"Callback", {
		{ STANDARD_RIGHTS_REQUIRED | 1, "CALLBACK_ALL_ACCESS", true },
		{ 1,							"MODIFY_STATE" },
		},
	},

};

string AccessMaskDecoder::DecodeAccessMask(wstring const& typeName, ACCESS_MASK access) {
	bool all = false;
	string result;
	if (access & 0xffff) {	// any specific access bits?
		auto it = Tables.find(typeName);
		if (it != Tables.end()) {
			for (auto& pair : it->second) {
				if ((pair.AccessMask & access) == pair.AccessMask) {
					result += pair.Decoded + string(" | ");
					if (pair.All) {
						all = true;
						break;
					}
				}
			}
		}
		else {
			result = "<unknown> | ";
		}
	}
	// add generic access mask

	static AccessMaskPair generic[] = {
		{ ACCESS_SYSTEM_SECURITY,	"ACCESS_SYSTEM_SECURITY" },
		{ STANDARD_RIGHTS_ALL,		"STANDARD_RIGHTS_ALL", true },
		{ SYNCHRONIZE,				"SYNCHRONIZE" },
		{ WRITE_DAC,				"WRITE_DAC" },
		{ READ_CONTROL,				"READ_CONTROL" },
		{ WRITE_OWNER,				"WRITE_OWNER" },
		{ DELETE,					"DELETE" },
	};

	if (!all) {
		for (auto& pair : generic) {
			if ((pair.AccessMask & access) == pair.AccessMask) {
				result += pair.Decoded + string(" | ");
				if (pair.All)
					break;
			}
		}
	}

	if (!result.empty())
		result = result.substr(0, result.length() - 3);
	return result;
}
